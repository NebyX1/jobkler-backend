"""
Django settings for testbackend project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
import pymysql

# Cargar variables de entorno desde el archivo .env
load_dotenv()

# Leer el entorno actual desde las variables de entorno
ENV = os.getenv("ENV", "development")

# Importamos el controlador PyMysql
pymysql.install_as_MySQLdb()

# BASE_DIR define la ruta raíz del proyecto, lo que facilita el uso de rutas relativas.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECRET_KEY es una clave secreta utilizada para la seguridad de Django. Esta clave debe mantenerse privada.
SECRET_KEY = os.getenv("SECRET_KEY", "default-secret-key")

# DEBUG debe estar en True solo en desarrollo. En producción debe ser False por seguridad.
DEBUG = os.getenv("DEBUG") == "True"

# ALLOWED_HOSTS especifica qué dominios pueden acceder al servidor.
if ENV == "production":
    ALLOWED_HOSTS = ["jobkler.com", "loko.jobkler.com"]
else:
    ALLOWED_HOSTS = ["localhost", "127.0.0.1"]

# Definición de aplicaciones instaladas en el proyecto. Esto incluye aplicaciones nativas de Django y personalizadas.
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Paquetes adicionales
    "corsheaders",
    "rest_framework",
    "django_filters",
    # Aplicaciones personalizadas dentro de la carpeta "apps"
    "apps.users",
    "apps.user_profile",
    "apps.reviews",
    "apps.profession_location",
    "apps.cloudinary_permissions",
    "apps.favourites",
]

# Middleware define una lista de "intermediarios" que procesan cada petición antes de que llegue a la vista.
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # Para manejo de CORS
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Configuración de URL raíz del proyecto
ROOT_URLCONF = "core.urls"

# Configuración de plantillas HTML
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],  # Puedes agregar rutas adicionales para plantillas aquí
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Configuración de WSGI
WSGI_APPLICATION = "core.wsgi.application"

# Configuración de la base de datos MariaDB usando variables de entorno
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
        "OPTIONS": {
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
            # No es necesario agregar configuraciones SSL adicionales aquí.
        },
    }
}


# Configuración de validación de contraseñas
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Configuración de idioma y zona horaria
LANGUAGE_CODE = "es-es"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files settings
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Configuración de auto campo por defecto
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Configuración de CORS según el entorno
if ENV == "production":
    CORS_ALLOWED_ORIGINS = [
        "https://jobkler.com",
        "https://loko.jobkler.com",
    ]
else:  # Modo development
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",  # React frontend en desarrollo
        "http://127.0.0.1:3000",
        "http://localhost:8000",  # Backend local
        "http://127.0.0.1:8000",
    ]

# Configuración del framework REST
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAuthenticated',),
    'DEFAULT_AUTHENTICATION_CLASSES': ('rest_framework_simplejwt.authentication.JWTAuthentication',),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}

# Configuración para Simple JWT para autenticación basada en tokens
SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('Bearer',),
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=int(os.getenv("ACCESS_TOKEN_LIFETIME", 270))),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=int(os.getenv("REFRESH_TOKEN_LIFETIME", 1))),
    "ROTATE_REFRESH_TOKENS": os.getenv("ROTATE_REFRESH_TOKENS", "True") == "True",
    "UPDATE_LAST_LOGIN": os.getenv("UPDATE_LAST_LOGIN", "True") == "True",
}

# Configuración del modelo de usuario personalizado
AUTH_USER_MODEL = 'users.User'

# Configuración de Djoser para la gestión de usuarios
DJOSER = {
    'LOGIN_FIELD': 'email',
    'USER_CREATE_PASSWORD_RETYPE': True,
    'ACTIVATION_URL': '/activate/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True,
    'SEND_CONFIRMATION_EMAIL': True,
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
    'PASSWORD_RESET_CONFIRM_URL': 'password-reset/{uid}/{token}',
    'SET_PASSWORD_RETYPE': True,
    'PASSWORD_RESET_SHOW_EMAIL_NOT_FOUND': True,
    'TOKEN_MODEL': None,
    'SERIALIZERS': {
        'user_create': 'apps.users.serializers.UserCreateSerializer',
        'user': 'apps.users.serializers.UserSerializer',
        'current_user': 'apps.users.serializers.UserSerializer',
    },
    'EMAIL': {
        'activation': 'apps.users.email.ActivationEmail',
        'confirmation': 'apps.users.email.ConfirmationEmail',
        'password_reset': 'apps.users.email.PasswordResetEmail',
        'password_changed_confirmation': 'apps.users.email.PasswordChangedConfirmationEmail',
    },
}

# Configuración de envío de correo electrónico
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv("EMAIL_HOST", "jobkler.com")  # Servidor SMTP
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 465))  # Puerto SMTP seguro (SSL)
EMAIL_USE_SSL = os.getenv("EMAIL_USE_SSL", "True") == "True"  # Usar SSL para la conexión
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "admin@jobkler.com")  # Usuario de SMTP
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")  # Contraseña de SMTP
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER  # Email por defecto para el remitente
